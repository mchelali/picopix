name: Unit testing API

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Vérifier le dépôt
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Étape 2 : Recréer le fichier .env à partir du secret
      - name: Recreate .env from secret
        run: echo "${{ secrets.ENV_FILE }}" > .env
      
      - name: Generate MinIO Keys
        id: generate-keys
        run: |
            AWS_ACCESS_KEY_ID=$(openssl rand -hex 12)
            AWS_SECRET_ACCESS_KEY=$(openssl rand -hex 24)

            # Append them to the .env file for container use
            echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env

            # Export them for later steps
            echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
        shell: bash

      # Étape 3 : Configurer Docker Compose
      - name: Set up Docker Compose
        run: |
          docker compose --version

      # Étape 4 : Démarrer les conteneurs nécessaires pour les tests
      - name: Start services
        run: |
          docker compose up -d postgres minio
          docker compose up -d api

      # # Étape 5 : Exécuter les tests unitaires
      - name: Run tests for API
        run: |
          docker exec $(docker compose ps -q api) poetry run python -m pytest 
      
      # # Étape 6 : Arrêter tous les conteneurs après les tests
      - name: Shut down services
        if: always()
        run: make stop

      # Étape 7 : Nettoyer le fichier .env
      - name: Clean up .env file
        run: rm -f .env