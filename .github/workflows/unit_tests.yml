name: Unit testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Vérifier le dépôt
      - name: Checkout code and remove unnecessary files
        run: |
          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-8.*'
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
          sudo apt-get autoremove -y
          sudo apt-get clean
        uses: actions/checkout@v4
      
      # Étape 2 : Recréer le fichier .env à partir du secret
      - name: Recreate .env from secret
        run: echo "${{ secrets.ENV_FILE }}" > .env

      # Étape 3 : Configurer Docker Compose
      - name: Set up Docker Compose
        run: |
          docker compose --version

      # Étape 4 : Démarrer les conteneurs nécessaires pour les tests
      - name: Start services
        run: |
          make start

      # Étape 5 : Exécuter les tests unitaires
      - name: Run tests for API
        run: |
          docker exec -it $(docker-compose ps -q api) poetry run python -m pytest 
      - name: Run tests for R&D
        run: |
          docker exec -it $(docker-compose ps -q r_and_d) poetry run python -m pytest 
      - name: Run tests for WebApp
        run: |
          docker exec -it $(docker-compose ps -q webapp) poetry run python -m pytest 

      # Étape 6 : Arrêter tous les conteneurs après les tests
      - name: Shut down services
        if: always()
        run: make stop

      # Étape 7 : Nettoyer le fichier .env
      - name: Clean up .env file
        run: rm -f .env