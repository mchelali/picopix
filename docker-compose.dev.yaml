services:
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      args:
        version: '0.0.1'
    ports:
      - "8000:8000"
    volumes:
      - ./src/api:/api
      - .env:/api/.env
    depends_on:
      - postgres
    networks:
      - localhost

  #r_and_d:
  #  build:
  #    context: .
  #    dockerfile: docker/Dockerfile.rd
  #    args:
  #      version: '0.0.1'
  #  ports:
  #    - "8002:8002"
  #  volumes:
  #    - ./src/rd:/r_and_d
  #    - ./dataset/:/r_and_d/dataset
  #    - ./models/:/r_and_d/models
  #    - .env:/r_and_d/.env
  #  networks:
  #    - localhost

  #webapp:
  #  build:
  #    context: .
  #    dockerfile: docker/Dockerfile.webapp
  #    args:
  #      version: '0.0.1'
  #  ports:
  #    - "80:80"
  #  volumes:
  #    - ./src/webapp:/webapp
  #    - .env:/webapp/.env
  #  networks:
  #    - localhost
  
  minio:
     image: minio/minio
     container_name: minio
     environment:
       MINIO_ROOT_USER: minioadmin
       MINIO_ROOT_PASSWORD: minioadmin     
       MINIO_ACCESS_KEY: minioadmin
       MINIO_SECRET_KEY: minioadmin
       MINIO_VOLUMES: /data
     volumes:
       - ./minio_data:/data
     ports:
       - "9000:9000"
       - "9001:9001"
     networks:
       - localhost
     command: "minio server --console-address :9001"
     restart: unless-stopped
     healthcheck:
       test: [ "CMD", "mc", "ready", "local" ]
       interval: 30s
       timeout: 20s
       retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - .docker/init-user.sql:/docker-entrypoint-initdb.d/init-user.sql
    networks:
      - localhost
    depends_on:
      - minio
    restart: unless-stopped

  pdadmin:
     image: dpage/pgadmin4
     environment:
       PGADMIN_DEFAULT_EMAIL: admin@admin.com
       PGADMIN_DEFAULT_PASSWORD: pixopass
       PGADMIN_LISTEN: 80
     ports:
       - "5050:80"
     depends_on:
       - postgres
     networks:
       - localhost

networks:
  localhost:
    driver: bridge
